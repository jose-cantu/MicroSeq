Metadata-Version: 2.4
Name: microseq_tests
Version: 0.1.0a2
Summary: MicroSeq sandbox package
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: pyyaml>=6
Requires-Dist: biopython>=1.8
Requires-Dist: PySide6
Requires-Dist: tqdm

# MicroSeq - Microbial Sequence Analysis Tool 

MicroSeq is currently in the prototype stage, it is a streamlined bioinformatics tool designed for efficient microbial sequence analysis. 
Currently, it focuses on on core functionalities such as sequence trimming, de nove assembly, and taxonomic classification 
uing BLAST searches against the Greengenes2 and SILVA databases. Full Version 1.0 once release will be both a CLI and GUI interface. Version 2.0 will then be wrapped in RUST for performance critical portions that will be tested rigoursely for seamless integration. 



### Quick Install Guide Meant for First Time Usage Only 
# NOTE: THIS IS IN PROTOTYPE PHASE SO USE AT OWN RISK - WILL NOT BE COMPLETE UNTIL Realistically a month from now. SO FUNCTIONALITY WILL CHANGE. 

```bash 
# 1 Clone the repo:
git clone https://github.com/jose-cantu/microseq_tests.git 
cd microseq_tests 

# 2 Create the Conda env located in env yaml 
conda env create -f config/environment.yml 
conda activate MicroSeq 

# 3 Install & download databases 
pip install -e .  # This sets the current version of MicroSeq


Tip on logging - `tail -F logs/microseq_latest.log` always follows the active file even after a midnight roll-over or per-run rename. I set a symlink to follow the active log file. 

microseq-setup    # prompts for DB + log locations 
## - add --quiet to skip prompts and it will set it up via defaults 
## - add --db-root /path/dbs to override default ~/.microseq_dbs 
## - add --log-dir /path/logs to override default microseq_tests/logs 

source ~/.bashrc  # reloads new exports (or you can open a new shell next time?) 

# Sanity check you can run to make sure databses work with blasting  

printf ">demo\nACGT\n" > tiny.fasta
for d in gg2 silva ncbi; do
  microseq blast -i tiny.fasta -d $d -o /tmp/$d.tsv \
                 --identity 50 --qcov 10 \
      && echo "[✓] $d OK"
done
rm tiny.fasta /tmp/*.tsv
```

Executable from your $PATH you can use from MicroSeq (they come from 'pyproject.toml`)

`microseq` - main multisub-command CLI 

`microseq-gui` - launches the GUI thats underdevelopment 

`microseq-setup` - one-off helper that downloads reference database 
Note: `microseq-setup` does 4 jobs here::
First it downloads and indexes GG2, SILVA, and NCBI16S into $MICROSEQ_DB_HOME (default is ~/.microseq_dbs)
2nd it creates the log folder if path is specified (default is microseq_tests/logs) otherwise. 
3rd it appends the needed export block I made to ~/.bashrc or ~/.zshrc or inside the MicroSeq conda env `$CONDA_PREFIX/etc/conda/activate.d/microseq.sh`.
This guarantess that `conda activate MicroSeq` picks up and sets the vars made. 
Finally 4th it writes config/config.yaml so the libary code can fall back on the same path if exports are missing. 
`source ~/.bashrc` is only required in the very first interactive shell so you inherit the exports I made without logging out. The next login or new terminal they are already present and ready to go. The `--quiet` flag is used if you want to run the whole thing non-interactively. 


`microseq-fix-tsv` - utlitity that normalises BLAST tables so they can be parsed through post blast sub command =)

`microseq-setup` will ask “laptop (d) or HPC (r)?”; pick `r` to pre-set to default  

## Key features

* **QC-trim pipeline**  
  * AB1 → FASTQ, FASTQ → FASTA, Trimmomatic & BioPython quality filtering  
* **De-novo assembly** (CAP3)  
* **BLAST search** against Greengenes 2, SILVA, or NCBI 16S  
* **Taxonomy join** + BIOM / CSV export for easy downstream stats  
* **PySide6 GUI** with file queue, live log pane and progress bar  
* **Single-command installers** (`microseq-setup`, `microseq blast …`) 


## Core CLI commands

| Command | Typical use | Minimal example |
|---------|-------------|-----------------|
| `microseq trim` | Full QC (AB1 or FASTQ) | `microseq trim -i traces.ab1 --sanger --workdir run1` |
| `microseq ab1-to-fastq` | Only convert ABI → FASTQ | `microseq ab1-to-fastq -i traces_ab1 -o fastq_out` |
| `microseq fastq-to-fasta` | Merge FASTQ → FASTA | `microseq fastq-to-fasta -i fastq_out -o merged.fasta` |
| `microseq assembly` | CAP3 assembly | `microseq assembly -i merged.fasta -o asm/` |
| `microseq blast` | BLAST search | `microseq blast -i merged.fasta -d gg2 -o hits.tsv` |
| `microseq add_taxonomy` | Greengenes2 tax join | `microseq add_taxonomy -i hits.tsv -t gg2_tax.tsv -o hits_tax.tsv` |
| `microseq postblast` | BIOM + CSV export | `microseq postblast -b hits_tax.tsv -m meta.tsv -o run1.biom` |
| `microseq-gui` | Launch GUI | `microseq-gui` |


## GUI at a glance

*Pick files or a whole folder, tweak identity / q-cov / threads, then watch the
log update live. Output `*.hits.tsv` appear beside each input file.*

## End-to-end example (AB1 traces)

```bash
conda activate MicroSeq
microseq trim       -i raw_ab1/     --sanger  --workdir run1           # QC
microseq assembly   -i run1/qc/trimmed.fasta  -o run1/asm              # CAP3
microseq blast      -i run1/asm/contigs.fasta \
                    -d gg2 -o run1/blast/hits.tsv                      # BLAST
microseq add_taxonomy \
        -i run1/blast/hits.tsv  -t gg2_tax.tsv \
        -o run1/blast/hits_tax.tsv                                     # taxonomy
microseq postblast  -b run1/blast/hits_tax.tsv \
                    -m meta.tsv  -o run1.biom                          # BIOM+CSV
``` 

MicroSeq's GUI uses PySide6 / Qt 6, licensed under the LGPL v3. See LICENSES/Qt_LGPLv3.txt for details. 
